<?php

@include_once 'Rmail/Rmail.php';

if (!class_exists('Rmail')) {
    class Iwebs_Email {}
    throw new Exception('Nem található az Rmail csomag. ');
}

/**
 *
 * @author Kovács Tamás
 *
 */
class Iwebs_Email extends Rmail
{
    /**
     * A konfigurációk tömbje.
     *
     * @var array
     */
    protected static $_config = array(
        'defaultRecipients' => null,
        'redirectTo' => null,
        'fromName' => 'Iwebs',
        'fromAddress' => null,
        'charset' => null,
        'sendingMethod' => null,
        'smtp' => null,
        'bccAddress' => null,
        'headCharset' => 'ISO-8859-2'
    );


	public function appendText($text){
		$this->text .= $text;
	}

    /**
     * Constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->init();
    }

    /**
     *
     */
    public function init()
    {
        if (self::$_config['sendingMethod']=='smtp') {
            $this->setSMTPParams(self::$_config['smtp']['host'], null, null, self::$_config['smtp']['useAuth'], self::$_config['smtp']['user'], self::$_config['smtp']['pass']);
        }
		$this->setFrom(''.self::$_config['fromName'].' <'.self::$_config['fromAddress'].'>');
		$this->setReturnPath(self::$_config['fromAddress']);
		$this->setHeadCharset(self::$_config['charset']);
		$this->setHTMLCharset(self::$_config['charset']);
		$this->setTextCharset(self::$_config['charset']);
    }

    /**
     * Beállítja a megadott config adatokat.
     * Megadható beállítások:
     * - fromAddress: A feladó e-mail cím.
     * - charset: A fejléc, a html szöveg és a sima szöveg kódolása.
     * - smtp: SMTP beállítások. Megadható adatok: host.
     *
     * @param array $config A konfig beállítások tömbként.
     * @return void
     */
    public static function setConfig($config)
    {
        foreach (self::$_config as $key => $value) {
            if (array_key_exists($key, $config)) {
                self::$_config[$key] = $config[$key];
            }
        }
    }

    /**
    * Sends the mail.
    *
    * @param  array  $recipients Array of receipients to send the mail to
    * @return mixed
    */
    public function send($recipients=array(), $sms = null)
    {
    	if (self::$_config['redirectTo'] != null) {
    		if($sms == null) { $this->appendText("\nEredeti Címzettek: ".implode(', ',(array)$recipients)); }
    		$recipients = self::$_config['redirectTo'];
    	} elseif (count($recipients)==0) {
            $recipients = self::$_config['defaultRecipients'];
        }
        return parent::send($recipients, self::$_config['sendingMethod']);
    }
    
    public function setBccAddress($bcc=NULL){
    	if ($bcc === NULL) {
    		$bcc = self::$_config['bccAddress'];
    	}
    	$this->setBcc($bcc);
    }
    
    /**
    * Function to encode a header if necessary
    * according to RFC2047
    * 
    * @param  string $input   Value to encode
    * @param  string $charset Character set to use
    * @return string          Encoded value
    */
    protected function encodeHeader($input, $charset = 'ISO-8859-1')
    {
   	 
        preg_match_all('/([\w ]*[\x80-\xFF]+[\w ]*)/', $input, $matches);
        
        //echo $input.'<br>';

        foreach ($matches[1] as $value) {
            //$replacement = preg_replace('/([\x80-\xFF])/e', '"=" . strtoupper(dechex(ord("\1")))', $value);
            $input = str_replace($value, '=?' . strtoupper($charset) . '?B?' . base64_encode($value) . '?=', $input);
            //echo $input.'<br/>';
        }
  
        return $input;
    }
    
    /*public function setSubject($subject){
    	parent::setSubject(iconv('UTF-8','ISO-8859-2',$subject));
    }*/
}